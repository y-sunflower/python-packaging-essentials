[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Packaging Essentials",
    "section": "",
    "text": "Preface\nThe aim of this site it to provide all the must known practices when it comes to create a Python package. It offers 10 blog posts, where each of them covers one topic with a few key points. The goal here is to empower anyone with just basic Python knowledge.\nWe’ll over concrete examples, use clear explanations, and try as much as possible to go straight to the point.\n\nGood to know\n\nAll blog posts are independant. Even if they follow some sort of order, it’s perfectly fine to just look at what interests you.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "introduction-to-packaging.html",
    "href": "introduction-to-packaging.html",
    "title": "1  Introduction to packaging",
    "section": "",
    "text": "This is a book created from markdown and executable code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to packaging</span>"
    ]
  },
  {
    "objectID": "organize-a-package.html",
    "href": "organize-a-package.html",
    "title": "2  Organize a package",
    "section": "",
    "text": "2.1 Initialize the directory\nIn order to follow the steps below, you’ll need to have both Git and uv installed on your machine. Both are command-line tools, meaning you’ll use your terminal to run commands that perform various actions.\nLet’s assume we’re naming our Python package “sunflower”.\nThe very first step is to create a new directory named “sunflower”. Inside this directory, create another directory with the same name. The structure should look like this:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Organize a package</span>"
    ]
  },
  {
    "objectID": "organize-a-package.html#initialize-the-directory",
    "href": "organize-a-package.html#initialize-the-directory",
    "title": "2  Organize a package",
    "section": "",
    "text": "sunflower/\n└── sunflower/",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Organize a package</span>"
    ]
  },
  {
    "objectID": "organize-a-package.html#add-main-python-project-files",
    "href": "organize-a-package.html#add-main-python-project-files",
    "title": "2  Organize a package",
    "section": "2.2 Add main Python project files",
    "text": "2.2 Add main Python project files\nNext, we need to create a few essential files at the root of the project.\n\npyproject.tomlLICENSE.git/.gitignore.venv/README.mdsandbox.py\n\n\nAll the package metadata. It will contain a lot of useful information when we want to distribute this PyPI package so that everyone can install it easily.\nHere is a simple version of this file:\n[project]\nname = \"sunflower\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \"&gt;=3.13\"\nauthors = [\n  { name=\"author_name\", email=\"email\" },\n]\ndependencies = []\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/user_name/sunflower\"\nIssues = \"https://github.com/user_name/sunflower/issues\"\n\n\nA basic text file containing the licence for your package. This licence is important because it tells other people what they are allowed to do with your package.\nIt is specific to each project, but you can find out more at [choosealicence.com] (https://choosealicense.com/).\nHere is an example of the most common licence: the MIT licence.\nCopyright (c) 2025 Your Name\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\nThis is a directory used internally by the Git software to track all changes in the project. Assuming that the first “sunflower ’ directory is in your Desktop/ directory, you should create this directory by running the git init command when you are in the Desktop/sunflower/ directory.\nIt’s very likely that you won’t see it, as most operating systems (Windows, MacOS, etc.) hide files/directories that start with ., but it doesn’t matter.\n\n\nA file in which each line describes one or more files/directories that are not explicitly part of the project or are not relevant in general. Don’t worry too much about this, you can just start with the example content below.\nIt is very likely that you will not see it outside your code editor, as most operating systems (Windows, MacOS, etc.) hide files/directories that start with ., but that doesn’t matter.\n# Python-generated files\n__pycache__/\n*.py[oc]\nbuild/\ndist/\nwheels/\n*.egg-info\n\n# Virtual environments\n.venv/\nvenv/\n.env/\nenv/\n\n# VS code config\n.vscode/\n\n# files on mac\n.DS_Store\n\n# all cache files\n*cache*\n\n# Sandbox files\nsandbox.py\nsandbox.ipynb\n\n\nA directory containing all the things we need to work properly in our Python environment. It contains a Python interpreter, all the packages used in the project (e.g. numpy, requests, etc), and a few other things.\nThe best way to create one is to run uv venv.\nIt is very likely that you will not see it outside your code editor, as most operating systems (Windows, MacOS, etc.) hide files/directories that start with ., but that doesn’t matter.\n\n\nA markdown file that describes the project, gives advice on how to use it, install it and so on. There are no rules about what to do with this file, it’s just used to tell people what is the first thing they should read before using your package.\nFor example, it could be something like this:\n# sunflower: my cool Python package\n\nWelcome to the homepage of the `sunflower` project.\n\nIt's a new project, but it will be available soon!\n\n\nA file that we will use to test and use our package. It’s optional but very practical.\n\n\n\n\nAs you can see, we haven’t written a single line of Python code, yet we already have a lot of files and directories. The organisation of our project now looks like this :\nsunflower/\n├── sunflower/\n├── .git/\n├── .venv/\n├── .gitignore\n├── README.md\n├── LICENSE\n├── sandbox.py\n└── pyproject.toml",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Organize a package</span>"
    ]
  },
  {
    "objectID": "organize-a-package.html#add-python-code",
    "href": "organize-a-package.html#add-python-code",
    "title": "2  Organize a package",
    "section": "2.3 Add Python code",
    "text": "2.3 Add Python code\nWhen creating a Python package, we want to write a reusable piece of code, not just put in a few scripts that do things. To illustrate :\n\nNot reusable codeReusable code\n\n\n\nname = \"Joseph\"\nmessage = f\"Hello {name}\"\nprint(message)\n\nHello Joseph\n\n\nThis code does something: it prints a message.\n\n\n\ndef say_hello(name):\n   message = f\"Hello {name}\"\n   print(message)\n\nThe code above does ‘nothing’. The only thing it does is create a function object that will be stored in memory. I can now call it and it will execute some code. For example:\n\nsay_hello(\"Joseph\")\n\nHello Joseph\n\n\n\n\n\nHere, we’ll keep things simple and assume that we only want to provide functions and classes in our package.\nNow, let’s create our first Python module (which is just a file ending in .py). We’ll call it module1.py, but it can be anything. The only thing we want to stick to when naming files is :\n\nuse lowercase only\navoid spaces and odd characters\nkeep it short\nuse underscores “_”\n\n\nBad file namesGood file names\n\n\nmy file.py\nMyfile.py\nmyFile.py\nmy@file.py\nmy-file.py\nthis-file-does-this-and-that.py\n\n\nmy_file.py\nmyfile.py\n\n\n\nSo let’s put our module1.py in sunflower/sunflower/, which will give us:\nsunflower/\n├── sunflower/\n│   └── module1.py\n├── .git/\n├── .venv/\n├── .gitignore\n├── README.md\n├── LICENSE\n├── sandbox.py\n└── pyproject.toml\nIn module1.py, we’re going to add our very first function to our package. For example, we’ll create a count_sunflower() function. This function will count how many times the word ‘sunflower’ occurs in a given string.\nimport re\n\ndef count_sunflowers(s):\n   s = re.sub(r\"[^a-zA-Z\\s]\", \"\", s)  # Remove non-text characters\n   s = s.lower()  # Convert to lowercase\n   n_sunflower = s.split().count(\"sunflower\")\n   n_sunflowers = s.split().count(\"sunflowers\")\n   return n_sunflower + n_sunflowers\nWe’re now going to add a __init__.py file in the same place as the module1.py file that contains our previous function. This is a special Python file. It tells Python that the sunflower/sunflower/ directory is a package, which will allow us to import functions from that package into the outside world.\nWe now have this:\nsunflower/\n├── sunflower/\n│   ├── __init__.py\n│   └── module1.py\n├── .git/\n├── .venv/\n├── .gitignore\n├── README.md\n├── LICENSE\n├── sandbox.py\n└── pyproject.toml\nThe __init__.py file should look like this:\nfrom .module1 import count_sunflowers\n\n__all__ = [\"count_sunflowers\"]\nAnd well done! You may not have realised it, but we already have a Python package that can be used with a function.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Organize a package</span>"
    ]
  },
  {
    "objectID": "organize-a-package.html#user-perspective",
    "href": "organize-a-package.html#user-perspective",
    "title": "2  Organize a package",
    "section": "2.4 User perspective",
    "text": "2.4 User perspective\nLet’s now look at how to use our package from the user’s point of view.\nOnce again, we’ll need to run a command in our terminal at Desktop/sunflower/:\nuv pip install -e .\nThis command will install our current package in editable mode. This allows us to test our package while making updates.\nThe next step is to open sandbox.py and write some code that uses our package.\nfrom sunflower import count_sunflower\n\ntext = \"\"\"\nSunflower petals bright and gold,  \nSunflower fields, a sight to behold.  \nSunflower dreams in the morning light,  \nBlooming softly, pure and bright.\n\"\"\"\n\nprint(count_sunflower(text))\n3\nNote that we can use any of the following syntaxes:\n\nSyntax 1Syntax 2Syntax 3\n\n\nfrom sunflower import count_sunflower\n\ntext = \"\"\"\nSunflower petals bright and gold,  \nSunflower fields, a sight to behold.  \nSunflower dreams in the morning light,  \nBlooming softly, pure and bright.\n\"\"\"\n\ncount_sunflower(text)\n\n\nimport sunflower\n\ntext = \"\"\"\nSunflower petals bright and gold,  \nSunflower fields, a sight to behold.  \nSunflower dreams in the morning light,  \nBlooming softly, pure and bright.\n\"\"\"\n\nsunflower.count_sunflower(text)\n\n\nimport sunflower as sfl # or any other alias like \"sf\" or \"sunflo\"\n\ntext = \"\"\"\nSunflower petals bright and gold,  \nSunflower fields, a sight to behold.  \nSunflower dreams in the morning light,  \nBlooming softly, pure and bright.\n\"\"\"\n\nsfl.count_sunflower(text)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Organize a package</span>"
    ]
  },
  {
    "objectID": "organize-a-package.html#final-organization",
    "href": "organize-a-package.html#final-organization",
    "title": "2  Organize a package",
    "section": "2.6 Final organization",
    "text": "2.6 Final organization\nAfter all these steps, our package now looks like this:\nsunflower/\n├── sunflower/\n│   ├── __init__.py\n│   ├── module1.py\n│   └── module2.py\n├── .git/\n├── .venv/\n├── .gitignore\n├── README.md\n├── LICENSE\n├── sandbox.py\n└── pyproject.toml",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Organize a package</span>"
    ]
  },
  {
    "objectID": "handling-dependencies.html",
    "href": "handling-dependencies.html",
    "title": "3  Handling dependencies",
    "section": "",
    "text": "This is a book created from markdown and executable code.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Handling dependencies</span>"
    ]
  },
  {
    "objectID": "unit-tests.html",
    "href": "unit-tests.html",
    "title": "4  Unit tests",
    "section": "",
    "text": "This is a book created from markdown and executable code.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Unit tests</span>"
    ]
  },
  {
    "objectID": "writing-documentation.html",
    "href": "writing-documentation.html",
    "title": "5  Writing documentation",
    "section": "",
    "text": "This is a book created from markdown and executable code.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Writing documentation</span>"
    ]
  },
  {
    "objectID": "errors-and-warnings.html",
    "href": "errors-and-warnings.html",
    "title": "6  Errors and warnings",
    "section": "",
    "text": "This is a book created from markdown and executable code.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Errors and warnings</span>"
    ]
  },
  {
    "objectID": "github-actions.html",
    "href": "github-actions.html",
    "title": "7  Github Actions",
    "section": "",
    "text": "This is a book created from markdown and executable code.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Github Actions</span>"
    ]
  },
  {
    "objectID": "pre-commit.html",
    "href": "pre-commit.html",
    "title": "8  Pre-commit",
    "section": "",
    "text": "This is a book created from markdown and executable code.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Pre-commit</span>"
    ]
  },
  {
    "objectID": "api-design.html",
    "href": "api-design.html",
    "title": "9  API design",
    "section": "",
    "text": "This is a book created from markdown and executable code.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>API design</span>"
    ]
  },
  {
    "objectID": "publish-to-pypi.html",
    "href": "publish-to-pypi.html",
    "title": "10  Publish to PyPI",
    "section": "",
    "text": "This is a book created from markdown and executable code.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Publish to PyPI</span>"
    ]
  },
  {
    "objectID": "organize-a-package.html#add-a-new-function",
    "href": "organize-a-package.html#add-a-new-function",
    "title": "2  Organize a package",
    "section": "2.5 Add a new function",
    "text": "2.5 Add a new function\nIf we want to add another function to our package, we can either add it to module1.py or create a new file such as module2.py.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Organize a package</span>"
    ]
  },
  {
    "objectID": "organize-a-package.html#add-an-internal-function",
    "href": "organize-a-package.html#add-an-internal-function",
    "title": "2  Organize a package",
    "section": "2.5 Add an internal function",
    "text": "2.5 Add an internal function\nWhen creating a package, it is very practical to create functions that we will use internally: inside the package itself.\nIf we go back to our previous example, we might want to have a separate function that takes a string and cleans it up by removing non-text characters and putting it in lower case. Let’s name this function _clean_string() and place it in a new file: module2.py.\nimport re\n\ndef _clean_string(s):\n   s = re.sub(r\"[^a-zA-Z\\s]\", \"\", s)  # Remove non-text characters\n   s = s.lower()  # Convert to lowercase\n   return s\nOur code in module1.py should now become :\nfrom .module2 import _clean_string\n\ndef count_sunflowers(s):\n   s = _clean_string(s)\n   n_sunflower = s.split().count(\"sunflower\")\n   n_sunflowers = s.split().count(\"sunflowers\")\n   return n_sunflower + n_sunflowers\nWe now have 2 functions:\n\ncount_sunflowers() a public function that users of the package will use.\n_clean_string() a private function used internally. The underscore (‘_’) at the beginning of the function name tells other people that it should not be used outside the package from which it came.\n\nNote that _clean_string() is still usable by users if they run it:\nfrom sunflower.module2 import _clean_string\nBut as you can see from the documentation blog post, we won’t have or create documentation on these functions, so they’re unlikely to find it anyway.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Organize a package</span>"
    ]
  }
]